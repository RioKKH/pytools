#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import random

from nsga2.population import Population
from nsga2.individual import Individual


class NSGA2Utils:
    """
    This class provids utility functions for the NSGA-II algorithm.
    """

    def __init__(self,
                 problem,
                 num_of_individuals=100,
                 num_of_tour_particips=2,
                 tournament_prob=0.9,
                 crossover_param=2,
                 mutation_param=5):
        """
        Initializes an instance of the NSGA2Utils class

        :param problem: The problem to optimize.
        :param num_of_individuals: The number of individuals (solutions) in each generation.
        :param num_of_tour_particips: The number of participants in tournament selection.
        :param tournament_prob: The probability used in tournament selection.
        :param crossover_param: The parameter used in crossover operation.
        :param mutation_param: The parameter used in mutation operation.
        """

        self.problem = problem
        self.num_of_individuals = num_of_individuals
        self.num_of_tour_particips = num_of_tour_particips
        self.tournament_prob = tournament_prob
        self.crossover_param = crossover_param
        self.mutation_param = mutation_param


    def create_initial_population(self):
        """
        Creates an initial population for the NSGA-II algorithm. Each individual
        in the population is generated by the problem and its objectives are
        calculated.

        :return: The initial population.
        """
        population = Population()
        for _ in range(self.num_of_individuals):
            individual = self.problem.generate_individual()
            self.problem.calculate_objectives(individual)
            population.append(individual)
        return population


    def fast_nondominated_sort(self, population):
        """
        Performs fast non-dominated sort on the population. It calculates the 
        domination count and dominated solutions for each individual, and
        assigns them to different fronts based on their domination count.
        """
        # Initialize the first front
        population.fronts = [[]]

        for individual in population:
            # For each individual in the population, initialize the domination
            # count to 0 and the set of dominated solutions to empty.
            individual.domination_count = 0
            individual.dominated_solutions = []

            for other_individual in population:
                # For each pair of individuals, if one dominates the other,
                # update their domination count and dominated solutions.
                if individual.dominates(other_individual):
                    individual.dominated_solutions.append(other_individual)
                elif other_individual.dominates(individual):
                    individual.domination_count += 1

            # If an individual is not dominated by any other, it belongs to their
            # first front.
            if individual.domination_count == 0:
                individual.rank = 0
                population.fronts[0].append(individual)

        # Generate the rest of the fronts.
        i = 0
        while len(population.fronts[i]) > 0:
            temp = []
            for individual in population.fronts[i]:
                for other_individual in individual.dominated_solutions:
                    other_individual.domination_count -= 1
                    # If an individual is dominated by exactly i individuals,
                    # it belongs to the i-th front.
                    if other_individual.domination_count == 0:
                        other_individual.rank = i + 1
                        temp.append(other_individual)

            i = i + 1
            population.fronts.append(temp)

    def calculate_crowding_distance(self, front):
        """
        Calculates the crowding distance for each individual in the front.
        The crowding distance is a measure of how close an individual is to its
        neighbors.
        """
        if len(front) > 0:
            solutions_num = len(front)
            for individual in front:
                individual.crowding_distance = 0

            for m in range(len(front[0].objectives)):
                front.sort(key=lambda individual: individual.objectives[m])

                # frontの両端の混雑距離はinfなので、大きな数値をここでは
                # セットしているのだと思われる
                front[0].crowding_distance = 10 ** 9 # float('inf')
                front[solutions_num - 1].crowding_distance = 10 ** 9 # float('inf')

                m_values = [individual.objectives[m] for individual in front]
                scale = max(m_values) - min(m_values)
                if scale == 0: scale = 1
                for i in range(1, solutions_num - 1):
                    front[i].crowding_distance +=\
                        (front[i + 1].objectives[m] - front[i - 1].objectives[m]) / scale

    def crowding_operator(self, individual, other_individual):
        """
        Compares two individuals based on their rank and crowding distance. It
        is used in the selection process to choose which individual will be kept
        in the population.

        :return: 1 if the first individual is better, -1 otherwise.
        """
        # If the first individual's  rank is lower or (the ranks are equal and
        # the first individual's crowding distance is larger)
        if (individual.rank < other_individual.rank) or \
                ((individual.rank == other_individual.rank) and (
                    individual.crowding_distance > other_individual.crowding_distance)):
            return 1
        else:
            return -1

    def create_children(self, population):
        """
        Creates a new population of children for the next generation.
        Each child is created by crossover and mutation operations on two parentes
        selected from the population.

        :return: The new population of children.
        """
        children = []
        while len(children) < len(population):
            parent1 = self.__tournament(population)
            parent2 = parent1
            while parent1 == parent2:
                # parent1とparent2を別の個体にしたい、ということかな？
                parent2 = self.__tournament(population)
            child1, child2 = self.__crossover(parent1, parent2)
            self.__mutate(child1)
            self.__mutate(child2)
            self.problem.calculate_objectives(child1)
            self.problem.calculate_objectives(child2)
            children.append(child1)
            children.append(child2)
        return children

    def __crossover(self, individual1, individual2):
        """
        Performs crossover operation on two individuals to create two children.
        The features of the children are a combination of the features of the parents.

        :return: The two children.
        """
        child1 = self.problem.generate_individual()
        child2 = self.problem.generate_individual()
        num_of_features = len(child1.features)
        genes_indexes = range(num_of_features)
        for i in genes_indexes:
            beta = self.__get_beta()
            x1 = (individual1.features[i] + individual2.features[i]) / 2
            x2 = abs((individual1.features[i] - individual2.features[i]) / 2)
            child1.features[i] = x1 + beta * x2
            child2.features[i] = x1 - beta * x2
        return child1, child2

    def __simulated_binary_crossover(
        self,
        individual1: Individual, 
        individual2: Individual) -> tuple[Individual, Individual]:
        """
        Simulated binary crossover(SBX)を行うメソッドです。

        Parameters:
            individual1 (Individual) : 親1
            individual2 (Individual) : 親2

        Returns:
            tupele:
                child1 (Individual) : 子1
                child2 (Individual) : 子2
        """
        child1 = self.problem.generate_individual()
        child2 = self.problem.generate_individual()
        num_of_featrues = len(child1.features)
        genes_indexes = range(num_of_features)
        for i in genes_indexes:
            beta = self.__get_beta()
            x1 = (individual1.features[i] + individual2.features[i]) / 2
            x2 = abs((individual1.features[i] - individual2.features[i]) / 2)
            child1.features[i] = x1 + beta * x2
            child2.features[i] = x1 - beta * x2
        return child1, child2


    def __unimodal_normal_distribution_crossover(
        self,
        individual1: Individual,
        individual2: Individual,
        individual3: Individual,
        sigma_xi: float = 0.5,
        sigma_eta: float = 0.35) -> tuple[Individual, Individual]:
        """
        Unimodal normal distribution crossover (UNDX)を行うメソッドです。
        親として3個体を引数として受け取り、2つの子個体を生成します。
        """



    def __get_beta(self):
        """
        Calculates the beta value used in the crossover operation.
        The beta value determines how much influence each parent has on the child.

        :return: The beta value.
        """
        u = random.random()
        if u <= 0.5:
            return (2 * u) ** (1 / (self.crossover_param + 1))
        return (2 * (1 - u)) ** (-1 / (self.crossover_param + 1))

    def __mutate(self, child):
        """
        Performs mutation operation on a child. The features of the child are
        randomly changed to introduce diversity in the population.
        """
        num_of_features = len(child.features)
        for gene in range(num_of_features):
            u, delta = self.__get_delta()

            if u < 0.5:
                child.features[gene] +=\
                    delta * (child.features[gene] - self.problem.variables_range[gene][0])
            else:
                child.features[gene] +=\
                    delta * (self.problem.variables_range[gene][1] - child.features[gene])

            if child.features[gene] < self.problem.variables_range[gene][0]:
                child.features[gene] = self.problem.variables_range[gene][0]

            elif child.features[gene] > self.problem.variables_range[gene][1]:
                child.features[gene] = self.problem.variables_range[gene][1]

    def __get_delta(self):
        """
        Calculates the delta value used in the mutation operation. The delta
        value determines how much a feature is changed during mutation.

        :return: The delta value.
        """
        u = random.random()
        if u < 0.5:
            return u, (2 * u) ** (1 / (self.mutation_param + 1)) - 1
        return u, 1 - (2 * (1 - u)) ** (1 / (self.mutation_param + 1))

    def __tournament(self, population):
        """
        Performs tournament selection on the population. A number of individuals
        are randomly selected from the population, and the best one is chosen
        based on their rank and crowding distance.

        :return: The chosen individual.
        """
        participants = random.sample(population.population,
                                     self.num_of_tour_particips)
        best = None
        for participant in participants:
            if best is None or (
                self.crowding_operator(participant, best) == 1 and
                    self.__choose_with_prob(self.tournament_prob)):
                best = participant

        return best

    def __choose_with_prob(self, prob):
        """
        Makes a decision based on a probability. This is used in the tournament
        selection process to decide whether to choose an individual.

        :return: True if the decision is made, False otherwise.
        """
        if random.random() <= prob:
            return True
        return False
